require "fileutils"
require "yaml"
include FileUtils

def clone_blueprint
  system 'git clone https://github.com/joshuaclayton/blueprint-css.git'
end

desc 'generate blueprint css'
task 'gen:css' do
  unless File.exist?('blueprint-css')
    clone_blueprint
  end

  path = "#{File.expand_path File.dirname(__FILE__)}/public/bp/"
  puts path
  rm_rf path
  mkdir_p path

  # cd
  cd File.dirname(__FILE__)
  cd 'blueprint-css'
  system "bundle install --without test"
  cd 'lib'

  # prepare config
  yaml = <<-Y
  rsec:
    path: #{path}
    custom_layout:
      column_count: 9
      column_width: 110
      gutter_width: 10
    plugins:
      - fancy-type
      - buttons
      - link-icons
  Y
  File.open 'settings.yml', 'w' do |f|
    f << yaml
  end

  # generate
  system 'ruby compress.rb -f settings.yml -p rsec'
end

# output an entry to ref.slim
def output_entry file, name, params, constraints, desc, example=nil
  file.puts "h3"
  file.puts "  | #{name}"
  if params
    file.puts "  span.params title='params'"
    file.puts "    ' (#{params})"
  end
  if constraints
    title = constraints == 'helper' ? 'should include Rsec::Helper' : 'constraints'
    file.puts "  span.constraints title='#{title}' #{constraints}"
  end
  file.puts "pre.desc"
  first = true
  desc.lines do |line|
    if first
      file.puts "  | " + line
      first = false
    else
      file.puts "    " + line
    end
  end
  return if (example.nil? or example == '')
  file.puts 'i.example example:'
  file.puts "pre.code"
  file.puts "  code.prettyprint.lang-rb"
  first = true
  example.lines do |line|
    if first
      first = false
      file.puts "    | " + line
    else
      file.puts "      " + line
    end
  end
end

desc 'generate ref for website'
task 'gen:ref' do
  src = File.read '../lib/rsec/helpers.rb'
  lines = src.lines.to_a
  out = File.open 'views/ref.slim', 'w'
  out.puts '/GENERATED BY rake gen:ref'

  # process @ desc and @ example
  i = 0
  get_line = ->{
    res = lines[i]
    i += 1
    res ? res.sub(/^\s+/, '') : nil
  }
  get_block = ->{
    res = ''
    while (line = get_line[] and line.start_with?('#   '))
      res << line.sub('#   ', '')
    end
    i -= 1
    res
  }
  while line = get_line[]
    if line.start_with? '# @ desc'
      constraints =
        if line.index('.')
          # constraints
          line = line[(line.index('.') + 1)..-1].strip
        end
      desc = get_block[]
      line = get_line[]
      example = 
        if line.start_with? '# @ example'
          get_block[]
        else
          i -= 1
          nil
        end
      /def\ (?<name>[^\s]+)\ (?<params>[^\n\&]*)/ =~ get_line[]
      params.strip!
      params.sub! /\s*,\s*$/, ''
      params = nil if params =~ /^\s*$/
      output_entry out, name, params, constraints, desc, example
    end
  end

  # process alias
  lines.each do |line|
    if line =~ /alias\ (\w+[\!\?]?)\ (\w+[\!\?]?)/
      output_entry out, $1, nil, nil, "alias for #$2"
    end
  end

  out.close
end

