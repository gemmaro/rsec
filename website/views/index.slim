h3 What
p
  ' Rsec is a dynamic
  a href="http://en.wikipedia.org/wiki/Parser_generator" parser generator
  |  for Ruby 1.9.

h3 Install
pre.code
  code.prettyprint.lang-sh
    | gem in rsec

h3 Use
p
  | Here's a simple arithmetic example:
pre.code
  code.prettyprint.lang-rb
    | require "rsec"
      include Rsec::Helpers
      def arithmetic
      <br/># evaluate binary arithmetic series
      # Apply this procedure to the lists of terms and factors generated in term and expr
      calculate = proc do |(p, *ps)|
        ps.each_slice(2).inject(p) do |left, (op, right)|
          left.send op, right
        end
      end
            
      <br/># build the parser
      num    = prim(:double).fail 'number'
      # num is a primitive of type double; if recognition fails, the token should be reported as "number"
      paren  = '('.r >> lazy{expr} << ')'
      # a paren is a left parenthesis, followed by an expr, followed by a right parenthesis.
      # The left parenthesis is treated as a token (.r); this is necessary for the token to be processed by rsec.
      # The >> and << operators ignore the value of the delimiters they adjoin: the value of the expression is expr
      # lazy is used to deal with the forward reference of expr, which has not been defined yet.
      factor = num | paren
      term   = factor.join(one_of_('*/%').fail 'operator').map &calculate
      # term is a sequence of factors, delimited with one of the delimites */%, optionally separated by space (one_of_).
      # The value of the expression is derived by applying the method calc to the list generated by join (map).
      expr   = term.join(one_of_('+-').fail 'operator').map &calculate
      arithmetic = expr.eof
      # The root non-terminal symbol, assigned to the arithmetic parser, is expr; it can only be followed by End-Of-File.
      end
      
      <br/># test it!
      print '1+ 2*4 = '
      p arithmetic.parse! '1+ 2*4' #=> 9
      print '1+ 2*/4 = '
      p arithmetic.parse! '1+ 2*/4' #=> should raise syntax error
ul
  li
    a href="/ref" Reference for all combinators
  li
    a href="https://github.com/luikore/rsec/wiki" Wiki, with advanced topics

h3 Code
p
  a href="http://github.com/luikore/rsec" Hosted on github.

script type="text/javascript"
  | var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-22444794-1']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  
